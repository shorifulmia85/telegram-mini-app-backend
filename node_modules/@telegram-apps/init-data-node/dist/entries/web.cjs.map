{"version":3,"file":"web.cjs","sources":["../../src/entries/web.ts"],"sourcesContent":["import { hashToken as _hashToken } from '../hashToken.js';\nimport { sign as _sign, SignOptions } from '../sign.js';\nimport { signData as _signData, SignDataOptions } from '../signData.js';\nimport { validate as _validate, type ValidateOptions, type ValidateValue } from '../validate.js';\nimport { isValid as _isValid } from '../isValid.js';\nimport type { CreateHmacFn, SignData, Text } from '../types.js';\n\nconst createHmac: CreateHmacFn<true> = async (data, key) => {\n  const encoder = new TextEncoder();\n\n  return crypto.subtle.sign(\n    'HMAC',\n    await crypto.subtle.importKey(\n      'raw',\n      typeof key === 'string' ? encoder.encode(key) : key,\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['sign', 'verify'],\n    ),\n    typeof data === 'string' ? encoder.encode(data) : data,\n  );\n};\n\n\n/**\n * Hashes specified token using a string, expected during init data sign.\n * @param token - token to hash.\n */\nexport function hashToken(token: Text): Promise<ArrayBuffer> {\n  return _hashToken(token, createHmac);\n}\n\n/**\n * @param value - value to check.\n * @param token - bot secret token.\n * @param options - additional validation options.\n * @returns True is specified init data is valid.\n */\nexport function isValid(value: ValidateValue, token: Text, options?: ValidateOptions): boolean {\n  return _isValid(value, token, validate, options);\n}\n\n/**\n * Signs specified init data.\n * @param data - init data to sign.\n * @param authDate - date, when this init data should be signed.\n * @param key - private key.\n * @param options - additional options.\n * @returns Signed init data presented as query parameters.\n */\nexport function sign(\n  data: SignData,\n  key: Text,\n  authDate: Date,\n  options?: SignOptions\n): Promise<string> {\n  return _sign(data, key, authDate, signData, options);\n}\n\n/**\n * Signs specified data with the passed token.\n * @param data - data to sign.\n * @param key - private key.\n * @param options - additional options.\n * @returns Data sign.\n */\nexport function signData(data: Text, key: Text, options?: SignDataOptions): Promise<string> {\n  return _signData(data, key, createHmac, options);\n}\n\n/**\n * Validates passed init data.\n * @param value - value to check.\n * @param token - bot secret token.\n * @param options - additional validation options.\n * @throws {SignatureInvalidError} Signature is invalid.\n * @throws {AuthDateInvalidError} \"auth_date\" property is missing or invalid.\n * @throws {SignatureMissingError} \"hash\" property is missing.\n * @throws {ExpiredError} Init data is expired.\n */\nexport function validate(\n  value: ValidateValue,\n  token: Text,\n  options?: ValidateOptions,\n): Promise<void> {\n  return Promise.resolve().then(() => _validate(value, token, signData, options));\n}\n\nexport * from './shared.js';\n"],"names":["_hashToken","_isValid","_sign","_signData","_validate"],"mappings":";;;AAOA,MAAM,aAAiC,OAAO,MAAM,QAAQ;AACpD,QAAA,UAAU,IAAI,YAAY;AAEhC,SAAO,OAAO,OAAO;AAAA,IACnB;AAAA,IACA,MAAM,OAAO,OAAO;AAAA,MAClB;AAAA,MACA,OAAO,QAAQ,WAAW,QAAQ,OAAO,GAAG,IAAI;AAAA,MAChD,EAAE,MAAM,QAAQ,MAAM,UAAU;AAAA,MAChC;AAAA,MACA,CAAC,QAAQ,QAAQ;AAAA,IACnB;AAAA,IACA,OAAO,SAAS,WAAW,QAAQ,OAAO,IAAI,IAAI;AAAA,EACpD;AACF;AAOO,SAAS,UAAU,OAAmC;AACpD,SAAAA,OAAA,UAAW,OAAO,UAAU;AACrC;AAQgB,SAAA,QAAQ,OAAsB,OAAa,SAAoC;AAC7F,SAAOC,OAAS,QAAA,OAAO,OAAO,UAAU,OAAO;AACjD;AAUO,SAAS,KACd,MACA,KACA,UACA,SACiB;AACjB,SAAOC,OAAAA,KAAM,MAAM,KAAK,UAAU,UAAU,OAAO;AACrD;AASgB,SAAA,SAAS,MAAY,KAAW,SAA4C;AAC1F,SAAOC,OAAU,SAAA,MAAM,KAAK,YAAY,OAAO;AACjD;AAYgB,SAAA,SACd,OACA,OACA,SACe;AACR,SAAA,QAAQ,QAAQ,EAAE,KAAK,MAAMC,gBAAU,OAAO,OAAO,UAAU,OAAO,CAAC;AAChF;;;;;;;;;;;;;;;;;"}
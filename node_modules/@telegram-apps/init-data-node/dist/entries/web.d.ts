import { SignOptions } from '../sign.js';
import { SignDataOptions } from '../signData.js';
import { ValidateOptions, ValidateValue } from '../validate.js';
import { SignData, Text } from '../types.js';
/**
 * Hashes specified token using a string, expected during init data sign.
 * @param token - token to hash.
 */
export declare function hashToken(token: Text): Promise<ArrayBuffer>;
/**
 * @param value - value to check.
 * @param token - bot secret token.
 * @param options - additional validation options.
 * @returns True is specified init data is valid.
 */
export declare function isValid(value: ValidateValue, token: Text, options?: ValidateOptions): boolean;
/**
 * Signs specified init data.
 * @param data - init data to sign.
 * @param authDate - date, when this init data should be signed.
 * @param key - private key.
 * @param options - additional options.
 * @returns Signed init data presented as query parameters.
 */
export declare function sign(data: SignData, key: Text, authDate: Date, options?: SignOptions): Promise<string>;
/**
 * Signs specified data with the passed token.
 * @param data - data to sign.
 * @param key - private key.
 * @param options - additional options.
 * @returns Data sign.
 */
export declare function signData(data: Text, key: Text, options?: SignDataOptions): Promise<string>;
/**
 * Validates passed init data.
 * @param value - value to check.
 * @param token - bot secret token.
 * @param options - additional validation options.
 * @throws {SignatureInvalidError} Signature is invalid.
 * @throws {AuthDateInvalidError} "auth_date" property is missing or invalid.
 * @throws {SignatureMissingError} "hash" property is missing.
 * @throws {ExpiredError} Init data is expired.
 */
export declare function validate(value: ValidateValue, token: Text, options?: ValidateOptions): Promise<void>;
export * from './shared.js';
